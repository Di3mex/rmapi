#!/bin/bash

# Needs:
# - ssh and scp (openssh)
# - convert (imagemagick)
# - pdftk (pdftk)
# - rsvg-convert (optional, to avoid rasterizing of lines)
# - gs & pdfinfo (optional, to account for original pdf size)

if [[ $# -eq 0 ]] ; then
    echo "Usage: ./exportNotebook (Partial)NotebookName AdditionalrM2svgArguments"
    echo "You can additionally append the -c argument for coloured annotations."
    exit 0
fi

# Getting the notebook prefix (Newest notebook matching the name)
tmpfolder=$1
id=$2
filename=$3

test -z "$id" && exit 1

# Fix for single page notebooks with no template (empty pagedata file by default)
if [ ! -s "${tmpfolder}"/*.pagedata ]
then
  echo "Blank" > "${tmpfolder}"/*.pagedata
fi

# Fix empty lines in pagedata files
sed -i -e "s/^[[:blank:]]*$/Blank/" "${tmpfolder}"/*.pagedata
echo "Exporting notebook ${filename} ($(wc -l "${tmpfolder}"/*.pagedata | cut -d\  -f1) pages)"

if [ -f "${tmpfolder}"/*.pdf ]
then
    echo "Found underlying document PDF, using as background."

    if command -v "gs" > /dev/null && command -v "pdfinfo" > /dev/null
    then
        # Read PDF dimensions for scale correction
        size=$(pdfinfo ${tmpfolder}/${id}.pdf | grep "Page size" | awk '{print $3,$5}')
        width=$(echo ${size} | cut -f1 -d " ")
        height=$(echo ${size} | cut -f2 -d " ")

        # Calculate new width and necessary offset (rM dimensions: 1404x1872)
        new_width=$(echo "scale=5; ${height} / 1872 * 1404" | bc)
        offset=$(echo "scale=5; ${new_width} - ${width}" | bc)

        echo "Original PDF dimensions are (${width}x${height}), correcting by offset of ${offset} to fit rM foreground."

        # Add offset to background.pdf to match foreground dimensions
        gs -q -sDEVICE=pdfwrite -dBATCH -dNOPAUSE -sOutputFile=${tmpfolder}/background_with_offset.pdf \
        -dDEVICEWIDTHPOINTS=${new_width} -dDEVICEHEIGHTPOINTS=${height} -dFIXEDMEDIA \
        -c "{${offset} 0 translate}" \
        -f "${tmpfolder}/${id}.pdf"

        ln -s background_with_offset.pdf ${tmpfolder}/background.pdf
    else
        ln -s ${id}.pdf ${tmpfolder}/background.pdf
    fi
else
    echo "No pdf file found"
    exit 1
fi

# Extract annotations and create a PDF
rsvg-convert -a -f pdf "${tmpfolder}"/foreground*.svg -o "${tmpfolder}"/foreground.pdf

# Add one empty page to foreground.pdf because last page is replicated
# https://stackoverflow.com/questions/12942486/insert-a-blank-page-between-each-existing-page-in-a-pdf-document
pdftk *-up.pdf cat end-1 output reverted.pdf
pdftk reverted.pdf cat 2-end output reverted2.pdf
pdftk reverted2.pdf  cat end-1 output originalfilename-up.pdf


# Use multistamp instead of multibackground to preserve transparency
pdftk "${tmpfolder}"/background.pdf multistamp "${tmpfolder}"/foreground.pdf output "${filename}.pdf"

filesize=$(ls -la "${filename}.pdf" | awk '{print $5}' | numfmt --to=iec-i --suffix=B --format="%.3f")
echo "Written ${filesize} to ${filename}.pdf"